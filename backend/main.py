#!/usr/bin/env python3
"""
Script principal para execu√ß√£o do algoritmo de otimiza√ß√£o de corte bidimensional
"""

import argparse
import json
import sys
from pathlib import Path

from src.api import api


def main():
    parser = argparse.ArgumentParser(
        description="Algoritmo de Otimiza√ß√£o de Corte Bidimensional",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python main.py --config examples/config_example.json
  python main.py --stock 1000 800 --pieces "200,300,2" "150,200,3"
  python main.py --interactive
        """
    )
    
    # Op√ß√µes de entrada
    input_group = parser.add_mutually_exclusive_group(required=True)
    input_group.add_argument(
        '--config', '-c',
        type=str,
        help='Arquivo de configura√ß√£o JSON'
    )
    input_group.add_argument(
        '--stock', '-s',
        nargs=2,
        type=int,
        metavar=('WIDTH', 'HEIGHT'),
        help='Dimens√µes do material base (largura altura)'
    )
    input_group.add_argument(
        '--interactive', '-i',
        action='store_true',
        help='Modo interativo'
    )
    
    # Par√¢metros adicionais
    parser.add_argument(
        '--pieces', '-p',
        nargs='+',
        type=str,
        help='Lista de pe√ßas no formato "largura,altura,quantidade"'
    )
    parser.add_argument(
        '--no-rotation',
        action='store_true',
        help='Desabilitar rota√ß√£o das pe√ßas'
    )
    parser.add_argument(
        '--no-guillotine',
        action='store_true',
        help='Desabilitar restri√ß√£o de corte guilhotina'
    )
    parser.add_argument(
        '--time-limit', '-t',
        type=int,
        default=300,
        help='Limite de tempo para otimiza√ß√£o em segundos (padr√£o: 300)'
    )
    
    # Op√ß√µes de sa√≠da
    parser.add_argument(
        '--output-dir', '-o',
        type=str,
        default='output',
        help='Diret√≥rio de sa√≠da (padr√£o: output)'
    )
    parser.add_argument(
        '--no-visualization',
        action='store_true',
        help='Desabilitar visualiza√ß√£o gr√°fica'
    )
    parser.add_argument(
        '--export-csv',
        action='store_true',
        help='Exportar resultados em CSV'
    )
    parser.add_argument(
        '--export-instructions',
        action='store_true',
        help='Exportar instru√ß√µes de corte'
    )
    parser.add_argument(
        '--json-output',
        action='store_true',
        help='Retornar resultado em formato JSON'
    )
    
    args = parser.parse_args()
    
    # Criar diret√≥rio de sa√≠da
    output_dir = Path(args.output_dir)
    output_dir.mkdir(exist_ok=True)
    
    try:
        # Carregar configura√ß√£o
        if args.config:
            response = api.load_config(args.config)
            if not response['success']:
                print(f"Erro ao carregar configura√ß√£o: {response['error']}")
                sys.exit(1)
            config = response['config']
        elif args.stock:
            # Configurar a partir dos argumentos da linha de comando
            stock_width, stock_height = args.stock
            
            if not args.pieces:
                print("Erro: --pieces √© obrigat√≥rio quando usando --stock")
                sys.exit(1)
            
            pieces = []
            for piece_str in args.pieces:
                try:
                    parts = piece_str.split(',')
                    if len(parts) == 3:
                        width, height, quantity = map(int, parts)
                        pieces.append((width, height, quantity, True, f"Pe√ßa {len(pieces) + 1}"))  # Com rota√ß√£o por padr√£o
                    elif len(parts) == 4:
                        width, height, quantity, allow_rotation = map(int, parts[:3] + [parts[3] == '1'])
                        pieces.append((width, height, quantity, allow_rotation, f"Pe√ßa {len(pieces) + 1}"))
                    elif len(parts) == 5:
                        width, height, quantity, allow_rotation, description = map(int, parts[:4]) + [parts[4]]
                        pieces.append((width, height, quantity, allow_rotation, description))
                    else:
                        print(f"Erro: formato inv√°lido para pe√ßa '{piece_str}'. Use 'largura,altura,quantidade' ou 'largura,altura,quantidade,rota√ß√£o' ou 'largura,altura,quantidade,rota√ß√£o,descri√ß√£o'")
                        sys.exit(1)
                except ValueError:
                    print(f"Erro: formato inv√°lido para pe√ßa '{piece_str}'. Use 'largura,altura,quantidade' ou 'largura,altura,quantidade,rota√ß√£o' ou 'largura,altura,quantidade,rota√ß√£o,descri√ß√£o'")
                    sys.exit(1)
            
            config = {
                'stock_width': stock_width,
                'stock_height': stock_height,
                'pieces': pieces,
                'allow_rotation': not args.no_rotation,
                'time_limit': args.time_limit,
                'name': 'Configura√ß√£o via linha de comando'
            }
        else:
            # Modo interativo
            config = interactive_config()
        
        # Executar otimiza√ß√£o
        if not args.json_output:
            print(f"\nüîß EXECUTANDO OTIMIZA√á√ÉO...")
            print(f"Limite de tempo: {config['time_limit']} segundos")
        
        result = api.optimize_cutting(
            stock_width=config['stock_width'],
            stock_height=config['stock_height'],
            pieces=config['pieces'],
            algorithm='enhanced',
            time_limit=config['time_limit']
        )
        
        if not result['success']:
            print(f"Erro na otimiza√ß√£o: {result['error']}")
            sys.exit(1)
        
        # Retornar resultado em JSON se solicitado
        if args.json_output:
            print(json.dumps(result, indent=2))
        else:
            # Mostrar resultados
            print(f"\n‚úÖ RESULTADOS")
            print(f"Algoritmo usado: {result['algorithm']}")
            print(f"Pe√ßas cortadas: {len(result['result']['pieces_placed'])}")
            print(f"√Årea utilizada: {result['result']['used_area']:,} mm¬≤")
            print(f"Desperd√≠cio: {result['result']['waste_percentage']:.2f}%")
            print(f"Tempo de execu√ß√£o: {result['result']['execution_time']:.2f} segundos")
            print(f"Solu√ß√£o √≥tima: {'Sim' if result['result']['is_optimal'] else 'N√£o'}")
            print(f"Efici√™ncia de √°rea: {result['efficiency_metrics']['area_efficiency']:.1f}%")
            
            # Visualiza√ß√£o
            if not args.no_visualization:
                print(f"\nüìä GERANDO VISUALIZA√á√ïES...")
                viz_result = api.generate_visualization(result, str(output_dir))
                if viz_result['success']:
                    print(f"Visualiza√ß√µes salvas em: {output_dir}")
                else:
                    print(f"Erro ao gerar visualiza√ß√µes: {viz_result['error']}")
            
            # Exportar resultados
            if args.export_csv or args.export_instructions:
                print(f"\nüíæ EXPORTANDO RESULTADOS...")
                save_result = api.save_results(result, str(output_dir), args.export_csv, args.export_instructions)
                if save_result['success']:
                    for file_type, file_path in save_result['saved_files'].items():
                        print(f"{file_type.upper()} salvo em: {file_path}")
                else:
                    print(f"Erro ao salvar resultados: {save_result['error']}")
            
            print(f"\nüéâ Otimiza√ß√£o conclu√≠da com sucesso!")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Otimiza√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro durante a execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


def interactive_config():
    """Configura√ß√£o interativa"""
    print("üîß CONFIGURA√á√ÉO INTERATIVA")
    print("=" * 40)
    
    # Dimens√µes do material base
    print("\nüìè DIMENS√ïES DO MATERIAL BASE")
    stock_width = int(input("Largura (mm): "))
    stock_height = int(input("Altura (mm): "))
    
    # Pe√ßas
    print("\nüß© PE√áAS A SEREM CORTADAS")
    pieces = []
    
    while True:
        try:
            piece_input = input("Pe√ßa (largura,altura,quantidade) ou 'fim' para terminar: ").strip()
            
            if piece_input.lower() in ['fim', 'f', '']:
                break
            
            parts = piece_input.split(',')
            if len(parts) == 3:
                width, height, quantity = map(int, parts)
                pieces.append((width, height, quantity, True, f"Pe√ßa {len(pieces) + 1}"))  # Com rota√ß√£o por padr√£o
                print(f"Adicionada: {width}x{height}mm, quantidade: {quantity}, com rota√ß√£o")
            elif len(parts) == 4:
                width, height, quantity, allow_rotation = map(int, parts[:3] + [parts[3] == '1'])
                pieces.append((width, height, quantity, allow_rotation, f"Pe√ßa {len(pieces) + 1}"))
                rotation_status = "com rota√ß√£o" if allow_rotation else "sem rota√ß√£o"
                print(f"Adicionada: {width}x{height}mm, quantidade: {quantity}, {rotation_status}")
            elif len(parts) == 5:
                width, height, quantity, allow_rotation, description = map(int, parts[:4]) + [parts[4]]
                pieces.append((width, height, quantity, allow_rotation, description))
                rotation_status = "com rota√ß√£o" if allow_rotation else "sem rota√ß√£o"
                print(f"Adicionada: {width}x{height}mm, quantidade: {quantity}, {rotation_status}, descri√ß√£o: {description}")
            else:
                print("Formato inv√°lido. Use: largura,altura,quantidade ou largura,altura,quantidade,rota√ß√£o ou largura,altura,quantidade,rota√ß√£o,descri√ß√£o")
                continue
            
        except ValueError:
            print("Formato inv√°lido. Use: largura,altura,quantidade")
        except KeyboardInterrupt:
            break
    
    if not pieces:
        print("Erro: Nenhuma pe√ßa foi definida")
        sys.exit(1)
    
    # Op√ß√µes
    print("\n‚öôÔ∏è  OP√á√ïES")
    allow_rotation = input("Permitir rota√ß√£o das pe√ßas? (s/n, padr√£o: s): ").strip().lower() != 'n'
    guillotine_cut = input("Usar corte guilhotina? (s/n, padr√£o: s): ").strip().lower() != 'n'
    
    try:
        time_limit = int(input("Limite de tempo em segundos (padr√£o: 300): ") or "300")
    except ValueError:
        time_limit = 300
    
    # Criar objeto de configura√ß√£o
    config = {
        'stock_width': stock_width,
        'stock_height': stock_height,
        'pieces': pieces,
        'allow_rotation': allow_rotation,
        'time_limit': time_limit,
        'name': 'Configura√ß√£o Interativa'
    }
    
    return config


if __name__ == "__main__":
    main()
